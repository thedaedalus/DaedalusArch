input {
    keyboard {
        xkb {

        }
        numlock // Enable numlock on startup
    }
    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    touchpad {
        tap // Enable tap-to-click
        natural-scroll // Enable natural (macOS-style) scrolling
    }

    focus-follows-mouse // Automatically focus windows under the mouse pointer
    workspace-auto-back-and-forth // Enable workspace back & forth switching

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    // focus-follows-mouse max-scroll-amount="0%"
}

output "DP-1" {
    mode "1920x1080"
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Layout
    layout {
        gaps 2 // Gap between windows
        center-focused-column "never" // Donâ€™t auto-center focused column

        preset-column-widths {
            proportion 0.33333
            proportion 0.5
            proportion 0.66667
        }

        focus-ring {
            width 3
            active-color "#ABB2C9"
            inactive-color "#3A3A3E"
        }

        shadow {
            softness 30
            spread 5
            offset x=0 y=5
            color "#0007"
        }

        background-color "transparent"

        struts {}
    }

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

// This line starts waybar, a commonly used bar for Wayland compositors.
// spawn-at-startup "waybar"

// Required for clipboard history integration
spawn-at-startup "bash" "-c" "wl-paste --watch cliphist store &"
//spawn-at-startup "mako"pf
spawn-at-startup "vesktop"
// Recommended (must install polkit-mate before hand) for elevation prompts
//spawn-at-startup "/usr/lib/mate-polkit/polkit-mate-authentication-agent-1"
spawn-at-startup "/usr/lib/polkit-kde-authentication-agent-1" "&"
// This may be a different path on different distributions, the above is for the arch linux mate-polkit package
// Starts noctalia-shell
spawn-at-startup "qs" "-c" "noctalia-shell"

environment {
  // Add to existing environment block
  DG_CURRENT_DESKTOP "niri"
  XDG_SESSION_TYPE "wayland"
  QT_QPA_PLATFORM "wayland;xcb"
  QT_QPA_PLATFORMTHEME "qt5ct"
  QT_QPA_PLATFORMTHEME_QT6 "qt6ct"
  ELECTRON_OZONE_PLATFORM_HINT "wayland"
  MOZ_ENABLE_WAYLAND "1"
  QT_WAYLAND_DISABLE_WINDOWDECORATION "1"

}
debug {
  honor-xdg-activation-with-invalid-serial
}
// you can add this to disable built in config load errors since dank shell provides this
config-notification {
    disable-failed
}

hotkey-overlay {
    // Uncomment this line to disable the "Important Hotkeys" pop-up at startup.
    skip-at-startup
}

//remove window decorations
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://yalter.github.io/niri/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0
}

//Workspaces

workspace "browser"
workspace "terminal"
workspace "editor"
workspace "chat"
workspace "games"

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    match app-id="^my.terminal$"
    opacity 0.95
    open-maximized true
    open-on-workspace "terminal"
}
window-rule {
    opacity 0.85
    open-floating true
    match app-id=r#"ghostty$"# title="^Ghostty"
    min-width 1000
    max-width 1200
    min-height 750
    max-height 900
    //open-on-workspace "terminal"
}
window-rule {
    match app-id=r#"firefox$"#
    //open-floating true
    open-maximized true
    open-on-workspace "browser"
}
window-rule {
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true // Always float Firefox PiP windows
}
window-rule {
    match app-id=r#"firefox$"# title="About Mozilla Firefox"
    open-floating true
    opacity 0.95
    default-floating-position x=32 y=32 relative-to="top-right"
}

window-rule {
    geometry-corner-radius 5
    clip-to-geometry true
}
window-rule {
    match app-id=r#"steam$"#
    open-maximized true
    open-on-workspace "games"
}
window-rule {
    match app-id=r#"code-oss$"#
    open-maximized true
    open-on-workspace "editor"
}
window-rule {
    match app-id=r#"vesktop$"#
    open-maximized true
    open-on-workspace "chat"
}
layer-rule {
    match namespace="^quickshell-wallpaper$"
}

layer-rule {
    match namespace="^quickshell-overview$"
    place-within-backdrop true
}
layer-rule {
    match namespace="^launcher$"

    opacity 0.95
}
window-rule {
    // Match by "dropdown" app ID.
    // You need to set this app ID when running your terminal, e.g.:
    // spawn "alacritty" "--class" "dropdown"
    match app-id="^dropdown.terminal$"
    opacity 0.90
    // Open it as floating.
    open-floating true
    // Anchor to the top edge of the screen.
    default-floating-position x=0 y=10 relative-to="top"
    // Half of the screen high.
    default-window-height { proportion 0.5; }
    // 80% of the screen wide.
    default-column-width { proportion 1.0; }
}
window-rule {
    match app-id="steam" title=r#"^notificationtoasts_\d+_desktop$"#
    default-floating-position x=10 y=10 relative-to="bottom-right"
}

window-rule {
    match app-id=r#"vesktop$"# title="About Vesktop"
    open-floating true
    opacity 0.95
    min-width 800
    //max-width 800
    min-height 750
    //max-height 900
    default-floating-position x=32 y=32 relative-to="top-right"
}
// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    geometry-corner-radius 12
    clip-to-geometry true
}


binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+T hotkey-overlay-title="Open a Terminal: Ghostty" { spawn "ghostty" "--class=my.terminal"; }
    Mod+F1 hotkey-overlay-title="Open dropdown terminal" {spawn "ghostty" "--class=dropdown.terminal"; }
    Mod+B hotkey-overlay-title="Open a Web Browser: Firefox"{spawn "firefox"; }
    Mod+S hotkey-overlay-title="Open Steam" {spawn "steam-native";}
    Mod+E hotkey-overlay-title="Open Editor: Code" {spawn "code";}
    Mod+Alt+F hotkey-overlay-title="Open File Exporer" {spawn-sh "thunar";}
    // Use spawn-sh to run a shell command. Do this if you need pipes, multiple commands, etc.
    // Note: the entire command goes as a single argument. It's passed verbatim to `sh -c`.
    // For example, this is a standard bind to toggle the screen reader (orca).


    // Open/close the Overview: a zoomed-out view of workspaces and windows.
    // You can also move the mouse into the top-left hot corner,
    // or do a four-finger swipe up on a touchpad.
    Mod+O repeat=false { toggle-overview; }

    Mod+Q repeat=false { close-window; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Down  { move-window-down; }
    Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }
    Mod+Shift+Left  { focus-monitor-left; }
    Mod+Shift+Down  { focus-monitor-down; }
    Mod+Shift+Up    { focus-monitor-up; }
    Mod+Shift+Right { focus-monitor-right; }
    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }


    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02+"; }
    // Mod+TouchpadScrollUp   { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.02-"; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace "browser"; }
    Mod+2 { focus-workspace "terminal"; }
    Mod+3 { focus-workspace "editor"; }
    Mod+4 { focus-workspace "chat"; }
    Mod+5 { focus-workspace "games"; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    Mod+Shift+1 { move-window-to-workspace 1; }
    Mod+Shift+2 { move-window-to-workspace 2; }
    Mod+Shift+3 { move-window-to-workspace 3; }

    // Switches focus between the current and the previous workspace.
    Mod+Tab { focus-workspace-previous; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // Expel the bottom window from the focused column to the right.
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    // Cycling through the presets in reverse order is also possible.
    // Mod+R { switch-preset-column-width-back; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }

    // Expand the focused column to space not taken up by other fully visible columns.
    // Makes the column "fill the rest of the space".
    Mod+Ctrl+F { expand-column-to-available-width; }

    Mod+C { center-column; }

    // Center all fully visible columns on screen.
    Mod+Ctrl+C { center-visible-columns; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus hotkey-overlay-title="Decrease Column width" { set-column-width "-10%"; }
    Mod+Equal hotkey-overlay-title="Increase Column width" { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus hotkey-overlay-title="Decrease Column height" { set-window-height "-10%"; }
    Mod+Shift+Equal hotkey-overlay-title="Increase Column height" { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+Ctrl+V  hotkey-overlay-title="Toggle Floating"     { toggle-window-floating; }
    Mod+Shift+V hotkey-overlay-title="Switch between Floating and Tiling"{ switch-focus-between-floating-and-tiling; }

    // Toggle tabbed column display mode.
    // Windows in this column will appear as vertical tabs,
    // rather than stacked on top of each other.
    Mod+W { toggle-column-tabbed-display; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Print hotkey-overlay-title="Capture region of screen" { screenshot; }
    Ctrl+Print hotkey-overlay-title="Capture screen" { screenshot-screen; }
    Alt+Print hotkey-overlay-title="Capture window"{ screenshot-window; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Shift+E hotkey-overlay-title="Quit Niri" { quit; }
    Ctrl+Alt+Delete hotkey-overlay-title="Quit Niri" { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
    
    Mod+Space hotkey-overlay-title="Application Launcher" {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "launcher" "toggle";
    }
    Mod+V hotkey-overlay-title="Clipboard History" {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "launcher" "clipboard";
    }
    Mod+P hotkey-overlay-title="Task Manager" {
      spawn "qs" "-c" "dms" "ipc" "call" "processlist" "toggle";
    }
    Mod+M hotkey-overlay-title="Side Panel" {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "sidePanel" "toggle";
    }
    Mod+N hotkey-overlay-title="Notification Center" {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "notifications" "toggleHistory";
    }
    Mod+Comma hotkey-overlay-title="Settings" {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "settings" "toggle";
    }
    Mod+I hotkey-overlay-title="Calculator" {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "launcher" "calculator";
    }
    Super+Alt+L hotkey-overlay-title="Lock Screen" {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "lockScreen" "toggle";
    }
    Mod+X hotkey-overlay-title="Power Panel" {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "powerPanel" "toggle";
    }
    XF86AudioRaiseVolume allow-when-locked=true {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "volume" "increase";
    }
    XF86AudioLowerVolume allow-when-locked=true {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "volume" "decrease";
    }
    XF86AudioMute allow-when-locked=true {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "volume" "muteOutput";
    }
    XF86AudioMicMute allow-when-locked=true {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "volume" "muteInput";
    }
    XF86MonBrightnessUp allow-when-locked=true {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "brightness" "increase";
    }
   // You can override the default device for e.g. keyboards by adding the device name to the last param
    XF86MonBrightnessDown allow-when-locked=true {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "brightness" "decrease";
    }
   // Night mode toggle
    Mod+Shift+N allow-when-locked=true {
      spawn "qs" "-c" "noctalia-shell" "ipc" "call" "dark" "toggle";
    }
}
